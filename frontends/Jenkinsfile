def secrets = [
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, engineVersion: 1, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN', vaultKey: 'oc-login-token'],
        [envVar: 'OC_LOGIN_SERVER', vaultKey: 'oc-login-server']]],
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, engineVersion: 1, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN_DEV', vaultKey: 'oc-login-token-dev'],
        [envVar: 'OC_LOGIN_SERVER_DEV', vaultKey: 'oc-login-server-dev']]],
    [path: params.VAULT_PATH_QUAY_PUSH, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_USER', vaultKey: 'user'],
        [envVar: 'QUAY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_RHR_PULL, engineVersion: 1, secretValues: [
        [envVar: 'RH_REGISTRY_USER', vaultKey: 'user'],
        [envVar: 'RH_REGISTRY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_CHROME_CYPRESS, engineVersion: 1, secretValues: [
        [envVar: 'CHROME_ACCOUNT', vaultKey: 'account'],
        [envVar: 'CHROME_PASSWORD', vaultKey: 'password']]],
]

def configuration = [vaultUrl: params.VAULT_ADDRESS, vaultCredentialId: params.VAULT_CREDS_ID, engineVersion: 1]

pipeline {
    agent none
    options {
        timestamps()
    }
    environment {
        NODE_BASE_IMAGE="registry.access.redhat.com/ubi9/nodejs-18:1-53"
        CYPRESS_TEST_IMAGE="quay.io/cloudservices/cypress-e2e-image:06b70f3"

        CICD_URL="https://raw.githubusercontent.com/RedHatInsights/cicd-tools/main"

        IMAGE="${APP_IMAGE}"

    }

    stages {
        stage('Clone Git Repository') {
            agent { label 'insights' }
            steps {
                script {
                    GIT_COMMIT_HASH = ghprbActualCommit.take(6)
                }
                
                checkout scmGit(
                    branches: [[name: '$ghprbSourceBranch']],
                    userRemoteConfigs: [[url: '$ghprbAuthorRepoGitUrl']])

                stash(name: 'project-files', includes: "**")
            }
        }

        stage('Lint') {
            agent { label 'insights' }
            environment {
                TEST_CONT="${APP_NAME}-lint-${GIT_COMMIT_HASH}"
            }
            when {
                expression {
                    return (RUN_LINT_FLAG == 'true')
                }
            }
            steps {
                unstash 'project-files'

                script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh './frontends/lint.sh'
                    }
                }
            }
        }

        stage('Frontend Build') {
            agent { label 'insights' }
            environment {
                COMMON_BUILDER="https://raw.githubusercontent.com/RedHatInsights/insights-frontend-builder-common/master"
                TEST_CONT="${APP_NAME}-frontend-build-${GIT_COMMIT_HASH}"
            }
            when {
                expression {
                    return (RUN_FRONTEND_COMMON_BUILDER_FLAG == 'true')
                }
            }
            steps {
                dir("${WORKSPACE}") {
                    unstash 'project-files'

                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh './frontends/frontend-build.sh'
                    }
                }
            }
        }

        stage('Tests/Build for Frontends') {
            parallel {
                stage('Unit Testing') {
                    agent { label 'insights' }
                    environment {
                        TEST_CONT="${APP_NAME}-unit-tests-${GIT_COMMIT_HASH}"
                    }
                    when {
                        expression {
                            return (RUN_UNIT_TESTS_FLAG == 'true')
                        }
                    }
                    steps {
                        unstash 'project-files'

                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh './frontends/unit_tests.sh'
                            }
                        }
                    }
                }

                stage('Cypress Component Testing') {
                    agent { label 'insights' }
                    environment {
                        TEST_CONT="${APP_NAME}-cypress-component-tests-${GIT_COMMIT_HASH}"
                    }
                    when {
                        expression {
                            return (RUN_CYPRESS_COMPONENT_TESTS_FLAG == 'true')
                        }
                    }
                    steps {
                        unstash 'project-files'

                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh './frontends/cypress_component_tests.sh'
                            }
                        }
                    }
                }

                stage('Cypress E2E Tests') {
                    agent { label 'insights' }
                    environment {
                        TEST_CONT="${APP_NAME}-cypress-e2e-tests-${GIT_COMMIT_HASH}"

                        INCLUDE_CHROME_CONFIG="true"
                    }
                    when {
                        expression {
                            return (RUN_CYPRESS_E2E_TESTS_FLAG == 'true')
                        }
                    }
                    steps {
                        unstash 'project-files'

                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh './frontends/cypress_e2e_tests.sh'
                            }
                        }
                    }
                }

                stage('IQE Tests') {
                    agent { label 'insights' }
                    environment {
                        TEST_CONT="${APP_NAME}-cypress-e2e-tests-${GIT_COMMIT_HASH}"

                        // Deploy to an ephemeral namespace for testing
                        GIT_COMMIT_HASH="$ghprbActualCommit"
                        DEPLOY_FRONTENDS=true
                        IQE_CJI_TIMEOUT="30m"
                        DEPLOY_TIMEOUT="900"  // 15min
                    }
                    when {
                        expression {
                            return (RUN_IQE_TESTS_FLAG == 'true')
                        }
                    }
                    steps {
                        unstash 'project-files'

                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh '''
                                    env
                                    ./frontends/iqe_tests.sh
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'artifacts/**/*', fingerprint: true
                            junit skipPublishingChecks: true, testResults: 'artifacts/junit-*.xml'
                        }
                    }
                }
            }
        }
    }
}
